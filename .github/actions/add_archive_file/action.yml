add_archive_file:
name: 'Add file to tar archive'
description: |
  Add a file to a tar archive.
  Does not need to have any file extension.
  Works on archives with gzip compression.
inputs:
  archive-path:
    description: 'Path of the tar archive.'
    required: true
  is-gzip-compressed:
    description: 'Whether the tar archive is compressed.'
    required: true
  file-path:
    description: 'Path of the file to add to the tar archive.'
    required: true
  archive-hierarchy-location:
    description: 'Path of the file inside of the tar archive, once it has been inserted.'
    required: true
outputs:
  result_archive_path:
    description: 'The path, including name, to the archive.'
    value: ${{ inputs.archive-path }}
runs:
  using: "composite"
  steps:
  - name: Collect some info now so we can perform asserts at the end
    id: pre-assert
    shell: bash
    run: |
      ## Collect some info now so we can perform asserts at the end

      # calculate archive_size
      archive_size="$(du --block-size=1K --apparent-size $archive_path | cut -f1)"
      echo "archive_size=$archive_size" | tee -a $GITHUB_OUTPUT

      # calculate additions_size
      additions_size="$(du --block-size=1K --apparent-size $file_additions | cut -f1)"
      echo "additions_size=$additions_size" | tee -a $GITHUB_OUTPUT

      # calculate archive_contents
      record_path="$RUNNER_TEMP/original_archive_contents.txt"
      if [[ $input_is_gzipped == "true" ]]; then
        tar -v -tzf $archive_path > "$record_path"
      else
        tar -v -tf $archive_path > "$record_path"
      fi
      echo "archive_contents_record=$record_path" | tee -a $GITHUB_OUTPUT
    env:
      input_is_gzipped: ${{ inputs.is-gzip-compressed }}
      archive_path: ${{ inputs.archive-path }}
      file_additions: ${{ inputs.file-path }}
    # outputs:
    # archive_size: Size of original archive, divided by 1024 bytes, no K suffix.
    # additions_size: Total size of files to add, divided by 1024 bytes, no K suffix.
    # archive_contents_record: Path to file containing output of tar -t (list of files in archive)

  - name: Make a working directory available, format input path (archive-hierarchy-location)
    id: safe-paths
    shell: bash
    run: |
      ## Make a working directory available, format input path (archive-hierarchy-location)

      # $working_dir
      [[ "${working_dir}" != */ ]] && working_dir="${working_dir}/" # ensure path string ends with slash
      working_dir=${working_dir/\~/$HOME}                           # replace '~' with home directory (can't figure out how to get this to happen automatically)
      mkdir -p $working_dir                                         # ensure path exists
      echo "working_dir=$working_dir" | tee -a $GITHUB_OUTPUT       # output

      # $archive_location
      [[ "${archive_location}" != */ ]] && archive_location="${archive_location}/"  # ensure path string ends with slash
      [[ "${archive_location}" == /* ]] && archive_location="${archive_location:1}" # ensure path string starts with no slash (like the rest of the files in the tar archive)
      echo "in_archive_location=$archive_location" | tee -a $GITHUB_OUTPUT          # output
    env:
      working_dir: ~/add_archive_file_working_dir/
      archive_location: ${{ inputs.archive-hierarchy-location }}
    # outputs:
    # working_dir: Location of the working directory, which exists, ending with a slash.
    # in_archive_location: archive-hierarchy-location, starting with no slash, ending with exactly one slash.

  - name: Unzip the archive
    id: unzip-archive
    if: ${{ inputs.is-gzip-compressed }}
    shell: bash
    run: |
      ## Unzip the archive

      # match:
      # from beginning to the last '/' not preceded by a '\'
      match_directory_pattern='^(.*[^\\])?\/'                   # extended regex
      echo "match_directory_pattern: $match_directory_pattern"

      # replace with:
      # escape all characters that would be special when present in the second part of a sed expression: &, /, \
      # using a preceding backslash: \
      directory_escaped_for_sed="${working_directory//[&\/\\]/\\&}"
      echo "directory_escaped_for_sed: $directory_escaped_for_sed"

      sed_expression="s/$match_directory_pattern/$directory_escaped_for_sed/"
      echo "sed_expression: $sed_expression"

      decompressed_path="$(echo "$gzipped_path" | sed -E "$sed_expression")"

      # Debug output: location we will unzip to.
      echo "Decompressing to: $decompressed_path"

      # Perform some checks
      if [[ "$gzipped_path" == "$decompressed_path" ]]; then
        echo "Assertion failed: we are decompressing to the same path as we are reading from." >&2
        return 1
      elif [ -e "$decompressed_path" ]; then
        echo "Warning: file already exists at this path, replacing it."
      fi

      # Unzip to the temp location
      cat $gzipped_path | gzip -d > $decompressed_path
      
      # Debug output: show size and location
      ls -lh $decompressed_path

      # Provide our result archive location
      echo "decompressed_path=$decompressed_path" | tee -a $GITHUB_OUTPUT
    env:
      gzipped_path: ${{ inputs.archive-path }}
      working_directory: ${{ steps.safe-paths.outputs.working_dir }}
    # outputs:
    # decompressed_path: Location of the unzipped archive.

  - name: Determine the unzipped archive path (might be original archive, might be an unzipped location)
    id: where-archive
    shell: bash
    run: |
      ## Determine the unzipped archive path (might be original archive, might be an unzipped location)
      if [[ "$new_path_was_created" == 'true' ]]; then
        echo "path=$created_path" | tee -a $GITHUB_OUTPUT
      else
        echo "path=$original_path" | tee -a $GITHUB_OUTPUT
      fi
    env:
      new_path_was_created: ${{ inputs.is-gzip-compressed }}
      original_path: ${{ inputs.archive-path }}
      created_path: ${{ steps.unzip-archive.outputs.decompressed_path }}
    # outputs:
    # path: Location of the unzipped archive (always available, unlike unzip-archive).
    
  - name: Add the file to the archive
    shell: bash
    run: |
      ## Add the file to the archive

      # Form an expression telling tar to add the file at $directory_in_archive,
      # not the directory in the GitHub Actions runner's filesystem

      # match:
      # from beginning to the last '/' not preceded by a '\'
      match_directory_pattern='^(.*[^\\])?\/'                   # extended regex
      echo "match_directory_pattern: $match_directory_pattern"

      # replace with:
      # escape all characters that would be special when present in the second part of a sed expression: &, /, \
      # using a preceding backslash: \
      directory_escaped_for_sed="${directory_in_archive//[&\/\\]/\\&}"
      echo "directory_escaped_for_sed: $directory_escaped_for_sed"

      sed_expression="s/$match_directory_pattern/$directory_escaped_for_sed/"
      echo "sed_expression: $sed_expression"

      # Perform checks on our regex work
      inputs=(
        '/test/directory/file'
        'test/direction/file'
        'file'
        '/'
      )
      expecteds=(
        "${directory_in_archive}file"
        "${directory_in_archive}file"
        "file"
        "${directory_in_archive}"
      )
      for i in {0..3}; do
        input="${inputs[i]}"
        expected="${expecteds[i]}"

        echo "Testing input case #${i}: $input"

        output="$(echo "$input" | sed -E "$sed_expression")"
        if [[ "$output" != "$expected" ]]; then
          echo "Assertion failed: unexpected result when testing sed_expression." >&2
          echo "Expected result: ${expected}"
          return 1
        fi
      done

      # Add the file

      echo "Adding to tar archive ${tar_archive} (displaying destination paths below)..."
      sed_expression="${sed_expression}x" # x indicates we are using an extended regular expression
      # Note: tar --append does not remove an existing file with the same name.
      # However, in a tar archive where multiple file records share one path,
      # the file closest to the end of the tar archive stream (i.e. the one we append)
      # takes precedent over the earlier ones.
      tar --append -vf $tar_archive --transform "${sed_expression}" "$source_file" --show-transformed-names
      echo "Done"

    env:
      source_file: ${{ inputs.file-path }}
      directory_in_archive: ${{ steps.safe-paths.outputs.in_archive_location }} # directory within the archive's filesystem, starting with no slash, ending with a slash
      tar_archive: ${{ steps.where-archive.outputs.path }} # uncompressed

  - name: Rezip the archive, return to original location
    if: ${{ inputs.is-gzip-compressed }}
    id: rezip-archive
    shell: bash
    run: |
      ## Rezip the archive, return to original location
      cat $decompressed_path | gzip --best > $original_archive_path
    env:
      original_archive_path: ${{ inputs.archive-path }}
      decompressed_path: ${{ steps.unzip-archive.outputs.decompressed_path }}

  - name: Asserts
    shell: bash
    run: |
      ## Asserts

      echo "Checking our output file (provided at path $archive_path)"
      
      # Assert that we changed the size of our archive
      echo "Note: if archive is gzipped, size increase of archive may be smaller than size of added file."
      final_archive_size_1K="$(du --block-size=1K --apparent-size $archive_path | cut -f1)"
      echo "Size of original archive: ${original_archive_size_1K} K"
      echo "Size of added file: ${additions_size_1K} K"
      echo "New archive size: ${final_archive_size_1K} K"

      if [[ "$final_archive_size_1K" -le "$original_archive_size_1K" ]]; then
        echo "Assertion failed: new archive is not larger than old archive" >&2
        if [[ "$output_is_gzipped" == 'true' ]]; then
          echo "Not failing, because difference in size could be explained by compression" >&2
        else
          exit 1
        fi
      fi
      sleep 1 # GitHub Actions has a quirk that logs stdout before an immediately preceding stderr output

      # Assert that we created a valid archive
      if [[ $output_is_gzipped == 'true' ]]; then
        echo "Checking if our output is a valid gzipped tar archive..."
        tar -xz --to-stdout -f $archive_path >> /dev/null
        echo "Success"
      else
        echo "Checking if our output is a valid tar archive..."
        tar -x --to-stdout -f $archive_path >> /dev/null
        echo "Success"
      fi

      # Assert that we added the right number of files
      echo "Checking what files we added to the archive..."
      path_new_archive_contents="$RUNNER_TEMP/new_archive_contents.txt"
      if [[ $output_is_gzipped == 'true' ]]; then
        tar -v -tzf $archive_path > $path_new_archive_contents
      else
        tar -v -tf $archive_path > $path_new_archive_contents
      fi
      differences_path="$RUNNER_TEMP/archive_contents_difference.txt"
      echo "old archive contents <> new archive contents"
      { diff "$path_to_original_archive_contents" "$path_new_archive_contents" || diff_ret=$? ; } | tee "$differences_path"
      differences_count="$(cat "$differences_path" | grep '^[^0-9-]' | wc -l)"
      echo "New archive has $differences_count added/removed filenames compared to original archive."
      if [[ "$differences_count" != '1' ]]; then
        echo "Assertion failed: expected 1 difference in file contents." >&2
        exit 1
      fi

      # Assert that the files we added are pretty much the estimated size
      readarray new_files_array < <(cat "$differences_path" | grep '^> ' | sed 's/^> //')
      new_files_total_uncompressed_1K='0'
      for item in "${new_files_array[@]}"; do
        echo "File in new archive: $item"

        # running total using var new_files_total_uncompressed_1K
        item_uncompressed_size_bytes="$(echo $item | awk '{print $3}')"
        item_uncompressed_size_1K=$(( ( $item_uncompressed_size_bytes + ( 1024 / 2 ) ) / 1024 )) # du rounds up, so we do the same
        new_files_total_uncompressed_1K=$(( $new_files_total_uncompressed_1K + $item_uncompressed_size_bytes ))

        # also check this file's individual size is not 0
        if [[ "$item_uncompressed_size_bytes" -eq '0' ]]; then
          echo "Assertion failed: new item in archive is size 0." >&2
          exit 1
        fi
      done
      new_files_off_by_1K=$(( $new_files_total_uncompressed_1K - $additions_size_1K ))
      new_files_off_by_1K=${new_files_off_by_1K#-}            # absolute value
      if [[ "$new_files_off_by_1K" -gt $(( $additions_size_1K / 4 )) ]]; then
        echo "Assertion failed: size (in archive) of uncompressed additions differs by those files' original size by: $new_files_off_by_1K K" >&2
        exit 1
      fi
      echo "Success"
    env:
      output_is_gzipped: ${{ inputs.is-gzip-compressed }}
      path_to_original_archive_contents: ${{ steps.pre-assert.outputs.archive_contents_record }}
      # make sure these were calculated with --block-size=1K.
      original_archive_size_1K: ${{ steps.pre-assert.outputs.archive_size }}
      additions_size_1K: ${{ steps.pre-assert.outputs.additions_size }}
      # make sure this matches the expression which defines the action's output.
      archive_path: ${{ inputs.archive-path }}
