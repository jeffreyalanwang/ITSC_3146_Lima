get_ubuntu_images:
name: 'Obtain base Ubuntu images'
description: 'From cache or from online'
inputs:
  no-cache:
    description: 'Whether to allow accessing a recent cached version'
    required: false
    default: true
  path:
    description: 'Directory in which to place the images'
    required: false
    default: './'
outputs:
  amd64_path:
    description: 'The path, including name, to the amd64 image.'
    value: ${{ steps.make-paths.outputs.amd64_path }}
  arm64_path:
    description: 'The path, including name, to the ARM image.'
    value: ${{ steps.make-paths.outputs.arm64_path }}
runs:
  using: "composite"
  steps:
    - name: Get current date (for up-to-date cache values)
      id: get-date
      shell: bash
      run: |
        DATE_STR=`date '+%F'`
        echo "date=$DATE_STR" >> $GITHUB_OUTPUT
        TIME_STR=`date '+%s'`
        echo "time=$TIME_STR" >> $GITHUB_OUTPUT
      # outputs:
      # date: 'The current date as a string with no spaces.'
      # time: 'The current time as epoch (seconds).'

    - name: Make sure desired directories exist + end with a slash
      id: safe-paths
      shell: bash
      run: |
        [[ "${path}" != */ ]] && path="${path}/" # ensure $path ends with slash
        mkdir -p $path
        echo "path=$path" >> $GITHUB_OUTPUT
        [[ "${cache}" != */ ]] && cache="${cache}/"
        mkdir -p $cache
        echo "cache=$cache" >> $GITHUB_OUTPUT
      env:
        path: ${{ inputs.path }}
        cache: $HOME/get_ubuntu_images_working_dir/
      # outputs:
      # path: The input path with exactly one trailing slash at the end.
      # cache: Location of the images when interacting with the cache

    - name: Generate paths
      id: make-paths
      shell: bash
      run: |
        echo "amd64_path=${dest_dir}${amd64_filename}" >> $GITHUB_OUTPUT
        echo "arm64_path=${dest_dir}${arm64_filename}" >> $GITHUB_OUTPUT
        echo "amd64_cachepath=${cache_dir}${amd64_filename}" >> $GITHUB_OUTPUT
        echo "arm64_cachepath=${cache_dir}${arm64_filename}" >> $GITHUB_OUTPUT
      env:
        # Turns out, these strings are only needed for this step.
        amd64_filename: amd64.wsl
        arm64_filename: arm64.wsl
        dest_dir: ${{ steps.safe-paths.outputs.path }}
        cache_dir: ${{ steps.safe-paths.outputs.cache }}
      # outputs:
      # amd64_path: Final path + name of the x86_64 image.
      # arm64_path: Final path + name of the ARM64 image.
      # amd64_cachepath: Path + name of the x86_64 image when interacting with the cache. ${{ format("{0}{1}", env.cache_dir, env.amd64_filename) }}
      # arm64_cachepath: Path + name of the ARM64 image when interacting with the cache. ${{ format("{0}{1}", env.cache_dir, env.arm64_filename) }}

    - name: Restore cached images
      id: cache-restore
      if: inputs.no-cache != 'true'
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.make-paths.outputs.amd64_cachepath }}
          ${{ steps.make-paths.outputs.arm64_cachepath }}
        key: ubuntu_images-${{ steps.get-date.outputs.date }}

    - name: Download images from server
      id: web-download
      if: (steps.cache-restore.outcome == 'skipped') || (steps.cache-restore.outputs.cache-hit != 'true')
      shell: bash
      run: |
        wget --no-verbose $AMD64_SOURCE -O $AMD64_DESTPATH
        wget --no-verbose $ARM64_SOURCE -O $ARM64_DESTPATH
      env:
        AMD64_SOURCE: 'https://releases.ubuntu.com/noble/ubuntu-24.04.2-wsl-amd64.wsl'
        AMD64_DESTPATH: ${{ steps.make-paths.outputs.amd64_cachepath }}
        ARM64_SOURCE: 'https://cdimages.ubuntu.com/releases/24.04.2/release/ubuntu-24.04.2-wsl-arm64.wsl'
        ARM64_DESTPATH: ${{ steps.make-paths.outputs.arm64_cachepath }}

    - name: Cache the downloaded images
      id: cache-save
      if: (steps.cache-restore.outcome == 'skipped') || (steps.cache-restore.outputs.cache-hit != 'true')
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ steps.make-paths.outputs.amd64_cachepath }}
          ${{ steps.make-paths.outputs.arm64_cachepath }}
        key: ubuntu_images-${{ steps.get-date.outputs.date }}

    - name: Move images into desired directory
      shell: bash
      run: |
        mv ${{ steps.make-paths.outputs.amd64_cachepath }} ${{ steps.make-paths.outputs.amd64_path }}
        mv ${{ steps.make-paths.outputs.arm64_cachepath }} ${{ steps.make-paths.outputs.arm64_path }}